---
title: Evaluating BLAT
tags:
- blat
- genome-mapping
...

BLAT promises to match sequences against a genome very quickly. In addition, it
claims that it can unsplice a transcript to match it to the genome. If so it
may be really useful for our purposes.

# Running sequences

I am just picking some sequences that have a known mapping to the genome and
seeing how the blat server performs. I am looking to see if it can map all
things. I will only record the things that do not work.

This [sequence](http://rnacentral.org/rna/URS00000E07AE/9606) only gives a partial match.
Below are the results from the [blat server](http://genome.ucsc.edu/cgi-bin/hgBlat?command=start).

# BLAT Search Results

```
   ACTIONS      QUERY           SCORE START  END QSIZE IDENTITY CHRO STRAND  START    END      SPAN
---------------------------------------------------------------------------------------------------
browser details YourSeq           93     1    93    93 100.0%     8   +   66113367  66113459     93
browser details YourSeq           76     1    93    93  91.2%    14   +   20683273  20683361     89
browser details YourSeq           75     1    93    93  98.8%    14   -   20653099  20653192     94
browser details YourSeq           74     1    93    93  98.7%    14   -   20663192  20663285     94
browser details YourSeq           72     1    93    93  97.4%    14   -   20657464  20657557     94
browser details YourSeq           72     1    93    93  97.4%    14   -   20659958  20660051     94
browser details YourSeq           72     1    93    93  91.9%     8   +   66113988  66114076     89
browser details YourSeq           71     1    93    93  92.3%     6   +   26568858  26568948     91
browser details YourSeq           69     1    93    93  90.5%     2   +   27050782  27050870     89
browser details YourSeq           68     1    93    93  89.2%     6   +   26594874  26594962     89
browser details YourSeq           68     1    82    93  91.5%     2   +  218245826 218245907     82
browser details YourSeq           66     1    93    93  89.2%     6   +   26575570  26575659     90
browser details YourSeq           65     1    93    93  87.7%     6   +   26577104  26577192     89
browser details YourSeq           42     1    48    93  93.8%     9   -   91147663  91147710     48
browser details YourSeq           37     1    60    93  75.6%     6   +  101517390 101517440     51
browser details YourSeq           35     1    37    93  97.3%     6   -  152505679 152505715     37
browser details YourSeq           35     1    37    93  97.3%     2   -  161741288 161741324     37
browser details YourSeq           34     2    37    93  97.3%     8   -   65697348  65697383     36
browser details YourSeq           33     1    35    93  97.2%    11   +  131741770 131741804     35
browser details YourSeq           32     1    34    93  97.1%  18_GL383567v1_alt   -      95095     95128     34
browser details YourSeq           32     1    34    93  97.1%    18   -   50387288  50387321     34
browser details YourSeq           32     2    37    93  94.5%  17_KI270908v1_alt   -     318518    318553     36
browser details YourSeq           32     2    37    93  94.5%  17_GL000258v2_alt   -    1336534   1336569     36
browser details YourSeq           32     2    37    93  94.5%  17_GL000258v2_alt   -     557545    557580     36
browser details YourSeq           32     2    37    93  94.5%    17   -   45616382  45616417     36
browser details YourSeq           32     2    37    93  94.5%  17_KI270908v1_alt   +     931472    931507     36
browser details YourSeq           32     2    37    93  94.5%  17_GL000258v2_alt   +    1172410   1172445     36
browser details YourSeq           32     2    37    93  94.5%    17   +   46229302  46229337     36
browser details YourSeq           27     5    33    93  96.6%    14   -   20630479  20630507     29
browser details YourSeq           24     6    33    93  92.9%    11   +  124700256 124700283     28
browser details YourSeq           21    16    36    93 100.0%     1   -  180051243 180051263     21
```

That is the first genomic position (8:66,113,367-66,113,459:1) is found, while
the second match (AC090195.5:9,180-9,272:1)is not. In addition, we see an
'extra' match (false positive?). This is only a subset of the sequence so we
can ignore them I think.

Are the coordinates in a normalized form? The two forms there look very
different for example.

This is probably worth trying out. I think I will install blat (at least in a
docker container) and then use this to map some E. coli sequences to the
correct locations.

# Fully testing RNAcentral data

The idea will be to see how well blat does with finding exact matches. I hope
that it will do very well. Looking at what I've seen from human sequences it
should. To do well the methodology must find matches that we know exist and not
find incorrect matches. Our cutoffs should be such that the if there is
contamination or other issues we do not find a match.

## Testing sequences which should match

So the idea is to run BLAT searches on a simple genome for all sequences that
have a known location. The goal is to produce a mapping that recovers the known
locations (true positives).

Suggested initial genomes:

- [Schizosaccharomyces pombe](http://rnacentral.org/search?q=RNA%20AND%20TAXONOMY:%224896%22%20AND%20has_genomic_coordinates:%22True%22)
- [Anopheles gambiae](http://rnacentral.org/search?q=RNA%20AND%20has_genomic_coordinates:%22True%22%20AND%20TAXONOMY:%227165%22)

| Species                   | Avaiable  | Not Avaiable |
|---------------------------|-----------|------------- |
| Schizosaccharomyces pombe | 1771      | 447          |
| Anopheles gambiae         | 3         | 70           |

Seems that all the things that have mappings are euks. Maybe worth trying
something with Bacterial sequences. But why are there not mappings for them?

### Bacterial Sequences

It seems that the Bacterial genomes are a single sequence and the mapping is
much simpler, it is just the position in the sequence. For example,
(https://www.arb-silva.de/browser/lsu/silva/U00096) provides several entries to
RNAcentral, one of them being an LSU. For some reason the genome mappings are
not being displayed as available, but they are really useful so we should test
them out too. To that end I would suggest using E. coli for testing as well.

| Species                   | Avaiable  | Not Avaiable |
|---------------------------|-----------|------------- |
| Escherichia coli          | ? (7858)  | ? (0)        |

## Testing sequences which should not match

This approach should be tested with decoy (true negative) sequences. These can
be sequences that have never been assigned to that species and may come from a
different domain (ie use Bacterial to test Eukaryotes). Suggested Decoys:

| Species                   | Decoys                                       |
|---------------------------|----------------------------------------------|
| Schizosaccharomyces pombe | Escherichia coli, Anopheles gambiae          |
| Anopheles gambiae         | Escherichia coli, Anopheles gambiae          |
| Escherichia coli          | Schizosaccharomyces pombe, Anopheles gambiae |

It may also be a good idea to get some chimeric sequences from greengenes to
see how this performs. I know they flag some sequences as chimeric. These are
good decoy sequences as they show a much more subtle problem that we may not be
able to deal with using simple approaches. This can only be applied to the
bacterial set, unless there are other sources of chimeric data.

# Overall

Thus my idea is to try out BLAT with a few small, simple genomes. I think it
will work pretty well to recover the mappings. The goal is to get the exact
matches that are given and no extra matches. We will use a few decoys to test
out possible mistakes. I suggest starting with Schizosaccharomyces pombe,
Anopheles gambiae, and Escherichia coli.


# Some issues

## How does blat number sequences?

I am trying S. pombe and I constantly see off by 1 errors for the lower
endpoint (for things on the - strand) as compared to the given data. Does
blat use 1 based inclusive indexes like is common, or is it something
different?

For example blat provides:

```psl
729	0	0	0	0	0	0	0	-	URS00002EC364_4896	729	0	729	I	5579133	1725051	1725780	1	729,	0,	1725051,
```

While the gff file shows:

```gff
I	RNAcentral	transcript	1725052	1725780	.	-	.	ID "CU329670.1:1725052..1725780:misc_RNA";Name "URS00002EC364";type "misc_RNA"
I	RNAcentral	noncoding_exon	1725052	1725780	.	-	.	ID "CU329670.1:1725052..1725780:misc_RNA_exon1";Name "URS00002EC364";Parent "CU329670.1:1725052..1725780:misc_RNA";type "misc_RNA"
```

Also, when looking at things on the + strand I see some off by one errors as
well. Is this just a problem with numbering or something else?

For example, blat gives me:

```psl
47	5	0	0	0	0	0	0	+	URS0000105A8D_4896	863	602	654	I	5579133	4600594	4600646	1	52,	602,	4600594,
```

While the gff file contains:

```gff
I	RNAcentral	transcript	4599993	4600855	.	+	.	ID "CU329670.1:4599993..4600855:misc_RNA";Name "URS0000105A8D";type "misc_RNA"
I	RNAcentral	noncoding_exon	4599993	4600855	.	+	.	ID "CU329670.1:4599993..4600855:misc_RNA_exon1";Name "URS0000105A8D";Parent "CU329670.1:4599993..4600855:misc_RNA";type "misc_RNA"
```

According to the biopython
[documentation](http://biopython.org/DIST/docs/api/Bio.SearchIO.BlatIO-module.html)
BLAT uses 0 based, half-open indexes, thus the offset from the gff file.


# Results

I've used this to try to find all sequences that have know matches and it does
ok. Some sequences are not found. Using the current version I find these:

```sh
$ create_mapping.py data/pombe/Schizosaccharomyces_pombe.ASM294v2.dna.toplevel.fa data/pombe/has-coordinates.fasta data/pombe/Schizosaccharomyces_pombe.ASM294v2.gff3
/Users/bsweeney/ebi/genome-mapping/.direnv/python-2.7.10/lib/python2.7/site-packages/Bio/SearchIO/__init__.py:211: BiopythonExperimentalWarning: Bio.SearchIO is an experimental submodule which may undergo significant changes prior to its future official release.
  BiopythonExperimentalWarning)
Loaded 12631379 letters in 6 sequences
Searched 1979210 bases in 1771 sequences
[Overlap(feature=<Feature transcript (I:3775854-3776756[+]) at 0x1068e1b90>, location=MappingHit(name='URS00004FE8F9_4896', chromosome='I', start=3765516, stop=3766419, is_forward=True, input_sequence=None, stats=HitStats(identical=903, gaps=0, query_length=903, hit_length=903)), shift=Shift(start=-10338, stop=-10337))]
[Overlap(feature=<Feature transcript (II:1609703-1610790[+]) at 0x106991850>, location=MappingHit(name='URS0000013F15_4896', chromosome='II', start=1637091, stop=1638179, is_forward=True, input_sequence=None, stats=HitStats(identical=1088, gaps=0, query_length=1088, hit_length=1088)), shift=Shift(start=27388, stop=27389))]
[Overlap(feature=<Feature transcript (III:29535-29898[+]) at 0x106798fd0>, location=MappingHit(name='URS000018D63E_4896', chromosome='III', start=2434215, stop=2434579, is_forward=True, input_sequence=None, stats=HitStats(identical=364, gaps=0, query_length=364, hit_length=364)), shift=Shift(start=2404680, stop=2404681))]
[Overlap(feature=<Feature transcript (III:1702123-1702252[+]) at 0x106751110>, location=MappingHit(name='URS000054FEA4_4896', chromosome='III', start=1370023, stop=1370153, is_forward=True, input_sequence=None, stats=HitStats(identical=130, gaps=0, query_length=130, hit_length=130)), shift=Shift(start=-332100, stop=-332099))]
[Overlap(feature=<Feature transcript (III:1107075-1107575[+]) at 0x1067c3b90>, location=MappingHit(name='URS00000C8FBA_4896', chromosome='III', start=1091418, stop=1091919, is_forward=True, input_sequence=None, stats=HitStats(identical=501, gaps=0, query_length=501, hit_length=501)), shift=Shift(start=-15657, stop=-15656))]
[Overlap(feature=<Feature transcript (II:1636393-1636776[+]) at 0x106835f90>, location=MappingHit(name='URS00003793B1_4896', chromosome='II', start=1611105, stop=1611489, is_forward=True, input_sequence=None, stats=HitStats(identical=384, gaps=0, query_length=384, hit_length=384)), shift=Shift(start=-25288, stop=-25287))]
[Overlap(feature=<Feature transcript (III:1091428-1091919[+]) at 0x1067c3110>, location=MappingHit(name='URS000060D544_4896', chromosome='III', start=1107074, stop=1107566, is_forward=True, input_sequence=None, stats=HitStats(identical=492, gaps=0, query_length=492, hit_length=492)), shift=Shift(start=15646, stop=15647))]
[Overlap(feature=<Feature transcript (II:1614384-1615655[+]) at 0x1068b7750>, location=MappingHit(name='URS000054E50A_4896', chromosome='II', start=1632226, stop=1633498, is_forward=True, input_sequence=None, stats=HitStats(identical=1272, gaps=0, query_length=1272, hit_length=1272)), shift=Shift(start=17842, stop=17843))]
[Overlap(feature=<Feature transcript (II:2129803-2130589[+]) at 0x106040b90>, location=MappingHit(name='URS00003D38FC_4896', chromosome='MTR', start=18746, stop=19533, is_forward=True, input_sequence=None, stats=HitStats(identical=787, gaps=0, query_length=787, hit_length=787)), shift=Shift(start=-2111057, stop=-2111056)),
 Overlap(feature=<Feature transcript (II:2129803-2130589[+]) at 0x106040b90>, location=MappingHit(name='URS00003D38FC_4896', chromosome='II', start=2135739, stop=2136526, is_forward=True, input_sequence=None, stats=HitStats(identical=787, gaps=0, query_length=787, hit_length=787)), shift=Shift(start=5936, stop=5937))]
[Overlap(feature=<Feature transcript (III:1093231-1093387[+]) at 0x1068255d0>, location=MappingHit(name='URS00003E79C3_4896', chromosome='III', start=1105606, stop=1105763, is_forward=True, input_sequence=None, stats=HitStats(identical=157, gaps=0, query_length=157, hit_length=157)), shift=Shift(start=12375, stop=12376))]
[Overlap(feature=<Feature transcript (III:2451885-2452883[+]) at 0x105f7a650>, location=MappingHit(name='URS00002B25BC_4896', chromosome='III', start=11259, stop=12260, is_forward=True, input_sequence=None, stats=HitStats(identical=1001, gaps=0, query_length=1001, hit_length=1001)), shift=Shift(start=-2440626, stop=-2440623)),
 Overlap(feature=<Feature transcript (III:2451883-2452883[+]) at 0x1069ca850>, location=MappingHit(name='URS00002B25BC_4896', chromosome='III', start=11259, stop=12260, is_forward=True, input_sequence=None, stats=HitStats(identical=1001, gaps=0, query_length=1001, hit_length=1001)), shift=Shift(start=-2440624, stop=-2440623)),
 Overlap(feature=<Feature transcript (III:2451885-2452883[+]) at 0x105f7a650>, location=MappingHit(name='URS00002B25BC_4896', chromosome='III', start=22129, stop=23130, is_forward=True, input_sequence=None, stats=HitStats(identical=1001, gaps=0, query_length=1001, hit_length=1001)), shift=Shift(start=-2429756, stop=-2429753)),
 Overlap(feature=<Feature transcript (III:2451883-2452883[+]) at 0x1069ca850>, location=MappingHit(name='URS00002B25BC_4896', chromosome='III', start=22129, stop=23130, is_forward=True, input_sequence=None, stats=HitStats(identical=1001, gaps=0, query_length=1001, hit_length=1001)), shift=Shift(start=-2429754, stop=-2429753))]
[Overlap(feature=<Feature transcript (III:1105609-1105766[+]) at 0x1060ebd90>, location=MappingHit(name='URS0000219790_4896', chromosome='III', start=1093227, stop=1093385, is_forward=True, input_sequence=None, stats=HitStats(identical=158, gaps=0, query_length=158, hit_length=158)), shift=Shift(start=-12382, stop=-12381))]
[Overlap(feature=<Feature transcript (I:3753730-3754811[+]) at 0x10694a090>, location=MappingHit(name='URS00002B3C47_4896', chromosome='I', start=3788296, stop=3789378, is_forward=True, input_sequence=None, stats=HitStats(identical=1082, gaps=0, query_length=1082, hit_length=1082)), shift=Shift(start=34566, stop=34567))]
[Overlap(feature=<Feature transcript (I:3789585-3789948[+]) at 0x10675e550>, location=MappingHit(name='URS00005FAF9E_4896', chromosome='I', start=3753159, stop=3753523, is_forward=True, input_sequence=None, stats=HitStats(identical=364, gaps=0, query_length=364, hit_length=364)), shift=Shift(start=-36426, stop=-36425))]
[Overlap(feature=<Feature transcript (II:1619340-1619803[+]) at 0x106040710>, location=MappingHit(name='URS00001AE569_4896', chromosome='II', start=1628611, stop=1629075, is_forward=True, input_sequence=None, stats=HitStats(identical=464, gaps=0, query_length=464, hit_length=464)), shift=Shift(start=9271, stop=9272))]
[Overlap(feature=<Feature transcript (II:1613127-1613220[+]) at 0x10687dcd0>, location=MappingHit(name='URS0000221087_4896', chromosome='II', start=1634661, stop=1634755, is_forward=True, input_sequence=None, stats=HitStats(identical=94, gaps=0, query_length=94, hit_length=94)), shift=Shift(start=21534, stop=21535))]
[Overlap(feature=<Feature transcript (I:3775473-3775847[+]) at 0x1060eb590>, location=MappingHit(name='URS0000385682_4896', chromosome='I', start=3766425, stop=3766800, is_forward=True, input_sequence=None, stats=HitStats(identical=375, gaps=0, query_length=375, hit_length=375)), shift=Shift(start=-9048, stop=-9047))]
[Overlap(feature=<Feature transcript (II:1619808-1620391[+]) at 0x106002a50>, location=MappingHit(name='URS0000597901_4896', chromosome='II', start=1628023, stop=1628607, is_forward=True, input_sequence=None, stats=HitStats(identical=584, gaps=0, query_length=584, hit_length=584)), shift=Shift(start=8215, stop=8216))]
```

This shows there are a few (18) sequences which are not found using BLAT. Most
of these are long (> 100nt). I didn't believe this so I wrote this simple program
to look for the shortest one (URS0000221087):

```python
from Bio.SeqIO import parse
import Bio.SeqIO

sequences = parse('data/pombe/Schizosaccharomyces_pombe.ASM294v2.dna.toplevel.fa',
                  'fasta')

targets = [
    '''
UAUAAAAUAUAUAUAUAUAUAUAUAUACAUUCAUUAUAUACAUUAUAUACAUUAUACUUGAACACCCCAAUUGGCUAUAUAAUUAGAGUCAGUA
    ''',

]

for sequence in sequences:
    rev = sequence.reverse_complement()
    for target in targets:
        dna = target.replace('U', 'T').strip()
        for seq in [sequence, rev]:
            location = seq.seq.find(dna)
            if location != -1:
                print(location)
                print(sequence)
                print(dna)
```

which produces

```
1613126
ID: II
Name: II
Description: II dna:chromosome chromosome:ASM294v2:II:1:4539804:1 REF
Number of features: 0
Seq('GATCTCGCAACTCTTAATAAAGCTAATTCCTGCTAATTCGCTATACACTAAATC...TTT', SingleLetterAlphabet())
TATAAAATATATATATATATATATATACATTCATTATATACATTATATACATTATACTTGAACACCCCAATTGGCTATATAATTAGAGTCAGTA
2905049
ID: II
Name: II
Description: II dna:chromosome chromosome:ASM294v2:II:1:4539804:1 REF
Number of features: 0
Seq('GATCTCGCAACTCTTAATAAAGCTAATTCCTGCTAATTCGCTATACACTAAATC...TTT', SingleLetterAlphabet())
TATAAAATATATATATATATATATATACATTCATTATATACATTATATACATTATACTTGAACACCCCAATTGGCTATATAATTAGAGTCAGTA
1090588
ID: III
Name: III
Description: III dna:chromosome chromosome:ASM294v2:III:1:2452883:1 REF
Number of features: 0
Seq('GATCAGCCAAAATGGCTGATCCAGCTATTTAGCAGGTTAAGGTCTCGTTCGTTA...GGG', SingleLetterAlphabet())
TATAAAATATATATATATATATATATACATTCATTATATACATTATATACATTATACTTGAACACCCCAATTGGCTATATAATTAGAGTCAGTA
```

In other words we can find the sequence with a trivial search. The first hit is
the 'correct' one.

The results for just that sequence are:

```python
[Overlap(feature=<Feature transcript (II:1613127-1613220[+]) at 0x10687dcd0>,
         location=MappingHit(name='URS0000221087_4896',
                             chromosome='II',
                             start=1634661,
                             stop=1634755,
                             is_forward=True,
                             input_sequence=None,
                             stats=HitStats(identical=94, gaps=0, query_length=94, hit_length=94)),
                             shift=Shift(start=21534, stop=21535))
]
```

This appears to find the hit in a very wrong place. The place is not found
using the trivial search at all.

If I look at this sequence, as well as several others that are not found they
look really repetitive. BLAT could be doing something clever to mask these
somehow. Looking at BLAT's help:

```
$ blat
blat - Standalone BLAT v. 36 fast sequence search command line tool
usage:
   blat database query [-ooc=11.ooc] output.psl
   [...]
   -mask=type     Mask out repeats.  Alignments won't be started in masked region
                  but may extend through it in nucleotide searches.  Masked areas
                  are ignored entirely in protein or translated searches. Types are:
                    lower - mask out lower-cased sequence
                    upper - mask out upper-cased sequence
                    out   - mask according to database.out RepeatMasker .out file
                    file.out - mask database according to RepeatMasker file.out
   -qMask=type    Mask out repeats in query sequence.  Similar to -mask above, but
                  for query rather than target sequence.
```

I see this masking options. This could have something to do with it. So if we
try to search with just the sequence:


```sh
query=$(mktemp)
output=$(mktemp)
cat > $query <<EOF
>URS0000221087
UAUAAAAUAUAUAUAUAUAUAUAUAUACAUUCAUUAUAUACAUUAUAUACAUUAUACUUGAACACCCCAAUUGGCUAUA
UAAUUAGAGUCAGUA
EOF
blat -q=rna data/pombe/Schizosaccharomyces_pombe.ASM294v2.dna.toplevel.fa $query $output
cat $output
```

we do in fact find it:

```
Loaded 12631379 letters in 6 sequences
Searched 94 bases in 1 sequences
psLayout version 3

match	mis- 	rep. 	N's	Q gap	Q gap	T gap	T gap	strand	Q        	Q   	Q    	Q  	T        	T   	T    	T  	block	blockSizes 	qStarts	 tStarts
     	match	match	   	count	bases	count	bases	      	name     	size	start	end	name     	size	start	end	count
---------------------------------------------------------------------------------------------------------------------------------------------------------------
94	0	0	0	0	0	0	0	+	URS0000221087	94	0	94	III	2452883	1090588	1090682	1	94,	0,	1090588,
94	0	0	0	0	0	0	0	+	URS0000221087	94	0	94	II	4539804	1613126	1613220	1	94,	0,	1613126,
94	0	0	0	0	0	1	300	+	URS0000221087	94	0	94	I	5579133	3756056	3756450	2	6,88,	0,6,	3756056,3756362,
93	1	0	0	0	0	0	0	-	URS0000221087	94	0	94	III	2452883	1108311	1108405	1	94,	0,	1108311,
94	0	0	0	0	0	0	0	-	URS0000221087	94	0	94	II	4539804	1634661	1634755	1	94,	0,	1634661,
94	0	0	0	0	0	1	18	-	URS0000221087	94	0	94	I	5579133	3785823	3785935	2	44,50,	0,44,	3785823,3785885,
```

It is the second hit. There are also several other exact matches, where the
second to last one is the one that the program selects. This must be a bug in
my code. Let's compare the data to see if there is something different between
the correct one and the selected one, just to be sure.

```
match	mis- 	rep. 	N's	Q gap	Q gap	T gap	T gap	strand	Q        	Q   	Q    	Q  	T        	T   	T    	T  	block	blockSizes 	qStarts	 tStarts
     	match	match	   	count	bases	count	bases	      	name     	size	start	end	name     	size	start	end	count
---------------------------------------------------------------------------------------------------------------------------------------------------------------
94	0	0	0	0	0	0	0	+	URS0000221087	94	0	94	II	4539804	1613126	1613220	1	94,	0,	1613126,
94	0	0	0	0	0	0	0	-	URS0000221087	94	0	94	II	4539804	1634661	1634755	1	94,	0,	1634661,
```

The only difference I see is the `+` vs `-` strand. I don't see why my code
would exclude it, but it must be a bug somewhere. That's why I should always
write tests. I feel like this is some sort of select only last match problem,
but I see that other sequences have more than one match, so I doubt it.

I tried checking of things are ordered and they are. Ok I guess I just have to
write tests and the like now.

Turns out the issue was that I was not properly setting the options, notably I
didn't include the `-q=rna` option for some reason. This is now fixed. In doing
so we no longer miss any(!) correct mappings. This is great news as now we can
use BLAT in simple cases. I haven't tested anything with introns or complex
things but we can use it in basic stuff which is great.

One important issue left is what to do with 'extra' mappings. For example the
sequence tested above will have the correct mapping as well as another that is
in the 'wrong' place. I need to determine how common these are and then what to
do, if anything about them.

- Extra mappings
    - These are places where the sequence of a known gene appears again. 

    - Long ones are the most problematic. What does it mean that an LSU appears > 1 time. 

    - Possible solutions:
        - Exclude those that lack promoters by some model.
        - Exclude those that appear to be psuedogenes

    - Both require fairly advanced models of the genome of each organims. May
      only be possible in well studied organisms. Probably just accept all
      matches for unimportant organisms, otherwise apply the model to select
      or reject.

    - Where to find such models?
      - Are they commonly created?
      - Can we create them?
        - Should we?
      - MOD probably have them.
      - Use gene annotations as well to find them?
        - Is this circular -- are only the things with locations in genes?
      - Are they tuned for just protein coding genes?

    - What if there is only 1 match?
        - Should we exclude based upon a model in this case?
            - Probably not
        - Not excluding will probably annotate pseudogenes and the like.

Possible workflow:

1. Find all genomic locations
2. If have gene models:
    - Filter locations by those that fall in model
        * Maybe use this if we have several matches keep those in a gene, unless
        none are them keep them all?
        * Just note those that are in a gene model if possible?
    - Otherwise keep all matches

Classes of positions:

- Given:
    - The one we have been given.
- Inferred:
    - No Known Gene Model
        - No way to filter further
    - With Gene Model Support
        - Fits inside gene model, most trustworthy
    - Conflicts with Gene Model
        - Does not fit in gene model, least trustworthy

May want to note all these cases. Probably add them to the genome track and let
the user see them. We should always run the sequences with a given location
through the process to evaluate how the process does. Also, we should show
these matches and annotate them with the information about the class.

Using gene model suggests showing gene model track as well. This is getting
very complicated and may not be a good idea. On the other hand this is the most
informative approach. People don't really want to be overwhelmed with this, so
sane defaults are the key.

Default to hiding things which are not in a gene model, and when there is no
model show everything.

Looking at pombe shows this may be a problem. From the numbers it appears that
the genes with a location are the only ones annotated. There are no models
which predict the presence of a gene. We would need predictions and not
annotations. Building good models is likely to be difficult to impossible (can
we use one model for all types of RNA, even small things? What if there are no
annotated locations?) and quite time consuming. Simply adding this information
to a track may be best. Only distinguish inferred and given on the pages.
