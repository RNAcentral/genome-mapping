#!/usr/bin/env sh

set -euo pipefail
IFS=$'\n\t'

fetch() {
  echo 1>&2 "Fetching $1"
  curl "$1" 2>/dev/null | gzip -d
}

getfasta() {
  bedtools getfasta -split -name -s -fi "$1" -bed "$2" | sed 's/::/ /'
}

base="$PWD/data/pombe/"
remote_genome="ftp://ftp.ensemblgenomes.org/pub/current/fungi/fasta/schizosaccharomyces_pombe/dna/Schizosaccharomyces_pombe.ASM294v2.dna.toplevel.fa.gz"
extra_genome="ftp://ftp.ebi.ac.uk/pub/databases/pombase/pombe/Chromosome_Dumps/fasta/Schizosaccharomyces_pombe.ASM294v2.30.dna.genome.fa.gz"
remote_known="ftp://ftp.ebi.ac.uk/pub/databases/RNAcentral/releases/6.0/genome_coordinates/Schizosaccharomyces_pombe.ASM294v2.gff3.gz"
remote_bed="ftp://ftp.ebi.ac.uk/pub/databases/RNAcentral/releases/6.0/genome_coordinates/Schizosaccharomyces_pombe.ASM294v2.bed.gz"
remote_md5s='ftp://ftp.ebi.ac.uk/pub/databases/RNAcentral//releases/6.0/md5/md5.tsv.gz'
matcher="exact"

known="$(basename "$remote_known" '.gz')"
genome="$(basename "$remote_genome" '.gz')"
extra="$(basename "$extra_genome" '.gz')"
bed="$(basename "$remote_bed" '.gz')"
md5s="$(basename "$remote_md5s" '.gz')"
targets="has-coordinates.fasta"

sums="$base/md5sums.txt"
initial="$base/initial-hits.pickle"
selected="$base/selected-hits.pickle"
compared="$base/compared.pickle"
gff="$base/compared.gff3"
summary="$base/summary.csv"

tmp="$(mktemp -d)"
pushd "$tmp"

echo 1>&2 'Fetching remote data'

fetch "$remote_bed" | correct-bed.py - $bed
fetch "$remote_known" > "$known"
fetch "$remote_genome" > "$genome"
fetch "$extra_genome" > "$extra"

echo 1>&2 "Finding troublesome silva/URS0000156566 entries"
grep 'silva' "$known" | gff2bed.py - silva.bed
grep 'URS0000156566' "$known" | gff2bed.py - - >> silva.bed
getfasta "$genome" silva.bed > silva.fasta
grep '^>' silva.fasta | cut -d ' ' -f1 | tr -d '>' > bad-silva

fetch "$remote_md5s" | grep -vf bad-silva > "$md5s"

echo 1>&2 "Determining UPI's missing from BED file but in gff"
cut -f4 "$bed" | sort -u > bed.upi
cut -f9 "$known" | tr ';' '\n' | awk -F '=' '{ if ($1 == "Name") print $2 }' | sort -u > gff.upi
comm -1 -3 bed.upi gff.upi | grep -vf bad-silva > bed-missing.upi

echo 1>&2 "Missing $(wc -l bed-missing.upi) entries from bed"
echo 1>&2 "Appending missing to gff"
grep -f bed-missing.upi "$known" | gff2bed.py - extra.bed

echo 1>&2 "Added $(wc -l extra.bed) entries"
cat extra.bed >> "$bed"

echo 1>&2 'Extracting targets'
getfasta "$genome" "$bed" > "$targets"

cat 1>&2 <<EOF
Ignoring MD5 hashes for silva sequences. As the sequence extracted from the
given range and the given sequence differ, this leads to the the computed
hashes differing. Means that we will fail the hash check because we assign the
same URS to different sequences, but only in the case of silva. The ranges are
correct, while the given sequences are not, thus we ignore the computed hashes
in this case.
EOF

echo 1>&2 'Checking MD5 sums'
md5sum -c "$sums"

echo 1>&2 'Validating sequence hashes'
fasta.py md5 display $targets computed.tsv
xsv join --no-headers -d '\t' 1 computed.tsv 1 $md5s | cut -d ',' -f1,2,4 > compared-md5.csv
awk -F ',' '{ if ($2 != $3) print "Sequence", $1, "extracted incorrectly"; }' compared-md5.csv > bad-md5
cat bad-md5

[ -s bad-md5 ] && exit 1
echo 1>&2 'All hashes pass'

echo 'Altering targets to RNA'
fasta.py dna-to-rna "$targets" t
mv t "$targets"

echo 'Limiting targets to only unique entries'
fasta.py merge-by-id "$targets" t
mv t "$targets"

cp "$bed" "$known" "$genome" "$targets" "$base"
popd
rm -r "$tmp"

known="$base/$known"
genome="$base/$genome"
bed="$base/$bed"
targets="$base/$targets"

echo 1>&2 'Searching for targets'
gm.py find "$genome" "$targets" "$initial"

echo 1>&2 'Selecting matching hits'
gm.py hits select "$initial" "$matcher" "$selected"

echo 1>&2 'Comparing to known locations'
gm.py hits compare "$selected" "$known" "$compared"

echo 1>&2 'Writing gff file from comparisons'
gm.py as gff3 "$compared" "$gff"

echo 1>&2 'Writing missing gff file'
gm.py comparisons select "$compared" type.pretty is missing - | gm.py as gff3 - data/pombe/missing.gff3

echo 1>&2 'Writing gff file of novel locations'
gm.py comparisons select $compared type.pretty is novel - | gm.py as gff3 - data/pombe/novel.gff3

echo 1>&2 'Writing gff file of incorrect locations'
gm.py comparisons select $compared type.match is incorrect - | gm.py comparisons extract - hit - | gm.py as gff3 - data/pombe/incorrect.gff3

gm.py comparisons summary "$compared" - | tee "$summary" | xsv table
